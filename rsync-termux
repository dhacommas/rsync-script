#!/data/data/com.termux/files/home/local/bin/bash
#!/data/data/com.termux/files/usr/bin/bash

export PATH=$PATH:/data/data/com.termux/files/home/local/bin:/sdcard/
: '
# rsync options source destination

    -v : verbose
    -r : copies data recursively (but donâ€™t preserve timestamps and permission while transferring data.
    -a : archive mode, which allows copying files recursively and it also preserves symbolic links, file permissions, user & group ownerships, and timestamps.
    -z : compress file data.
    -h : human-readable, output numbers in a human-readable format.
    --progress : Shows Progress
    --delete : to delete files from destination that are not in the source directory.
    --exclude-from 'rsync_excludes.txt'
    --delete-excluded : delete excluded files from destination
    --remove-source-files : Automatically Delete source Files After Successful Transfer.
    --dry-run : simulate
'

# ---------------------------------------------------

# Directory to be backed up (source)
#SOURCEDIR="$sdcard/Music $sdcard/DCIM $sdcard/Documents"

# make sure we are in sdcard directory
cd /sdcard

# config directory (MODIFY AS PER NEED)
configDIR=config/rsync

if [[ -d $configDIR ]]; then
    echo "config directory exists"
else
    mkdir -pv config/rsync
fi

##(MODIFY AS PER NEED)##

# Destination Directory
DESTINATIONDIR=/storage/863D-B702/rsync/storage

# excludes file - this contains a wildcard pattern per line of files to be excluded
EXCLUDES="$configDIR/rsync_excludes.txt"

# BackupDir.txt file - this contains per line of directories to be backed up
BackupDirFile=$configDIR/BackupDir.txt

# Checks
if [[ ! -d $DESTINATIONDIR ]]; then
  echo "ERROR: Backup destination is missing"
  exit 1

elif [[ ! -s $EXCLUDES ]]; then
  echo "ERROR: rsync_excludes.txt is missing."
  exit 1
fi

elif [[ ! -s $BackupDirFile ]]; then
  echo "ERROR: BackupDir.txt is missing."
  exit 1
fi

# Argument
OPT="-avh --progress --delete --delete-excluded --exclude-from=$EXCLUDES"


while IFS= read -r file; do
  rsync $OPT "$file" $DESTINATIONDIR
done < "$BackupDirFile"

#------------------------------------------------------------------------------------------------


: '
    for d in $SOURCEDIR; do
	rsync $OPT $d/ $DESTINATIONDIR/$d/
    done
'

# rsync $OPT $SOURCEDIR $DESTINATIONDIR

: '

while IFS= read -r file; do
  echo "Do something on $file ..."
done < "filenames.txt"

'
